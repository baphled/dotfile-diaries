=== csv.vim

plugin:   csv.vim
homepage: http://github.com/chrisbra/csv.vim
source:   git://github.com/chrisbra/csv.vim.git

This plugin has quite a bit of functionality including the basics that are provided by most of the filetype plugins I
have already installed. Along with this basic functionality it also provides ways of interacting with CSV alot nicer.

Below is a breakdown of the added commands that are provided by `csv.vim`:

  WhatColumn
  NrColumns
  SearchInColumn
  HiColumn
  ArrangeColumn
  UnArrangeColumn
  DeleteColumn
  InitCSV
  Header
  Sort
  Column
  MoveColumn
  SumCol
  NewRecord
  NewDelimiter
  Duplicate

==== Text objects

  * `if` - select inner field
  * `af` - select outter field

==== Converting a CSV

  ConverData

  ConverData!

When using this command Vim will ask you for some input, similar to below:

  Pre convert text: <html><body><table>

This allows you to input the text you want at the start of the selection

  Post convert text: </table></body></html>

This allows you to input the text you want at the end of the selection

Both of these can be predefined with the use of `g:csv_post_convert` and `g:csv_pre_convert`.

The final prompt will be as follows, this will tell Vim how to format the actual CSVÂ data:

  Converted text, use %s for column input: <tr><td>%s</td><td>%s</td><td>%s</td></tr>

So the output would like something like this:

  <html><body><table>
  <tr><td>1,</td><td>2,</td><td>3,</td></tr>
  <tr><td>2,</td><td>2,</td><td>4,</td></tr>
  </table></body></html>

This is actually a contrived example and in this case I could just use `:TOhtml` but such a workflow would be perfect
for generating SQL based on CSV data.

NOTE: Add an example of how I could generate SQL using CSV data.

There's a host of more functionality that csv.vim provides but there is pretty decent documentation on these features
and I'll stop right here for the momenet as most of them I will tend not to use. 

