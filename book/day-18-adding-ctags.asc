=== Adding ctags

First off i'll need to install ctags.

  brew install ctags

Now ctags needs to know where the methods and classes live so i'll need a way
to get file locations easily. I found the following snip from
http://andrewradev.com/2011/06/08/vim-and-ctags/[here] so I'll copy and paste
the following snippet into my ~/bin/generate-rails-gem-tags

NOTE: I'd prefer the script to be stored within my dotvim but I'll deal with that later.

----
  #! /usr/bin/env ruby

  # Generate all tags for all gems included by bundler in gems.tags
  #
  # Basically does the same as "bundle show gemname", except for all gems.
  # Interestingly enough, "bundle show" without any arguments falls back to
  # "bundle list", otherwise the whole thing could have been a bash one-liner.
  require 'bundler'

  paths = Bundler.load.specs.map(&:full_gem_path)

  system("ctags -R -f gems.tags #{paths.join(' ')}")
----

I have to make sure that this is executable.

  chmod u+x ~/bin/generate-rails-gem-tags

This will index all the gems I've installed via bundle. I'll also need to add
the projects files to the index.

  ctags -R .

It would be nice if this was done automatically when I cd into a project
directory or could be handled with tmux when I start a new project session. For
the moment I'll just bind this command to a mapping something like:

  noremap <leader>ct :!ctags -R .<CR>

To keep my tags up to date I'll se 'autotag' which depends on python but allows
me to keep my tags up to date and removes tags that are no longer needed.

  git submodule add git://github.com/vim-scripts/AutoTag.git bundle/auto-tag

So now I have the basics setup I need to work out how to navigate through the
tags easily without looking where I originally was.

 * `<C-]>` - Go to the first found definition
 * `<C-t>` - Jump back to where you started
 * `:tselect` - List all the found definitions

Trying to move around tags can be quite a strain so I'll add some custom
mappings to navigate through them easily.

 * `]t` - next tag
 * `[t` - previous tag

  noremap ]t :tnext<CR>
  noremap [t :tprev<CR>

==== Resources

 * http://andrewradev.com/2011/06/08/vim-and-ctags/[vim and ctags]
