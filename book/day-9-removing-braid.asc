=== Removing Braid

Braid can be a pain and I'd rather have more control over my external
repositories to achieve this I will look into using git submodules. But
first I will need to remove the external repositories and get rid of
braid.

I had the following gems installed before I started this process:

  braid
  git-scribe
  tmuxinator
  pry

I no longer want to use braid, so I will firstly remove all the external
repositories

I also have the following external repositories:

  oh-my-zsh
  dotirssi
  muttfiles
  dotvim

WARNING: Removing these files cause a lot of things to break.

To make sure that I don't break anything I can't fix imediately, and to
keep my previous setup, I'll need to create a new branch

  gco -b remove_braid

NOTE: The above command uses an aliases via oh-my-zsh

We'll start off by removing these via braid as follows:

  braid remove oh-my-zsh
  braid remove dotirssi
  braid remove dotmutt
  braid remove dotvim

So the most important repository for me is oh-my-zsh it's pretty much
invaluable and it would be an idea to get this setup as soon as possible.

  git submodule add git@github.com:baphled/oh-my-zsh.git oh-my-zsh
  git submodule init
  git submodule update

Now I have my zsh setup as a submodule I can make changes to the repository and
push them directory to the right repository :) 

The next thing is to do the same for my other repositories

  git submodule add git@github.com:baphled/dotvim.git dotvim
  git submodule add git@github.com:baphled/muttfiles.git dotmutt
  git submodule add git@github.com:baphled/dotirssi.git dotirssi

Now any changes made to my external repositories intermally or externally can
now be easily tracked :)

The last step in the journey is to remove braid from my Gemfile as it is no
longer needed directly by the repository. That is as easy as removing the line
`gem "braid"` and running `bundle` again.

Now we have a cleaner repository and less worry in regards to how my other repositories are updated and managed.

