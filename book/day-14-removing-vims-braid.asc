==== Removing VIMs braid

So I've been using braid to manage my vim plugins but I'd prefer if I used git
directly as I am with my dotfiles. The first thing to do is keep a list of all
of the plugins that I have, I'll need this so that I can keep the plugins I am
currently using.

I'll be using the following command to add each plugin as a git module:

  git submodule add git://github.com/username/project.git plugin/path

All but one of the plugins live in the `bundle` direction the only exception is
vim-pathogen with lives in the parent directory of my dotvim repository. So the
command I need should output the following formats
  
  git://github.com/mileszs/ack.vim.git ack.vim.git
  git://github.com/spf13/asciidoc-vim.git asciidoc-vim.git
  git://github.com/ayang/AutoComplPop.git AutoComplPop.git
  git://github.com/kien/ctrlp.vim.git ctrlp.vim.git
  git://github.com/tpope/vim-cucumber.git vim-cucumber.git
  git://github.com/Raimondi/delimitMate.git delimitMate.git
  git://github.com/tpope/vim-endwise.git vim-endwise.git
  git://github.com/tpope/vim-fugitive.git vim-fugitive.git
  git://github.com/claco/jasmine.vim.git jasmine.vim.git
  git://github.com/leshill/vim-json.git vim-json.git
  git://github.com/scrooloose/nerdcommenter.git nerdcommenter.git
  git://github.com/tpope/vim-pastie.git vim-pastie.git
  git://github.com/tpope/vim-rails.git vim-rails.git
  git://github.com/msanders/snipmate.vim.git snipmate.vim.git
  git://github.com/tpope/vim-surround.git vim-surround.git
  git://github.com/scrooloose/syntastic.git syntastic.git
  git://github.com/tpope/vim-unimpaired.git vim-unimpaired.git
  git://github.com/smerrill/vagrant-vim.git vagrant-vim.git
  git://github.com/tpope/vim-abolish vim-abolish
  git://github.com/tpope/vim-bundler.git vim-bundler.git
  git://github.com/kchmck/vim-coffee-script.git vim-coffee-script.git
  git://github.com/rson/vim-conque.git vim-conque.git
  git://github.com/mattn/gist-vim.git gist-vim.git
  git://github.com/austintaylor/vim-indentobject vim-indentobject
  git://github.com/Lokaltog/vim-powerline.git vim-powerline.git
  git://github.com/rodjek/vim-puppet.git vim-puppet.git
  git://github.com/tpope/vim-ragtag vim-ragtag
  git://github.com/tpope/vim-rake vim-rake
  git://github.com/bronson/vim-ruby-block-conv.git vim-ruby-block-conv.git
  git://github.com/ecomba/vim-ruby-refactoring.git vim-ruby-refactoring.git
  git://github.com/hallison/vim-ruby-sinatra vim-ruby-sinatra
  git://github.com/csexton/rvm.vim.git rvm.vim.git
  git://github.com/kaichen/vim-snipmate-ruby-snippets.git vim-snipmate-ruby-snippets.git
  git://github.com/godlygeek/tabular.git tabular.git
  git://github.com/nelstrom/vim-textobj-rubyblock vim-textobj-rubyblock
  git://github.com/kana/vim-textobj-user vim-textobj-user
  git://github.com/jimenezrick/vimerl.git vimerl.git
  git://github.com/vitaly/vim-vividchalk.git vim-vividchalk.git
  git://github.com/mattn/webapi-vim.git webapi-vim.git
  git://github.com/tpope/vim-pathogen.git vim-pathogen.git

This is enough to work with for the moment, I can easily do set this up so that
I don't have to manually add each plugin using git submodule. I need the
following format to successfully add each plugin using git.

  git submodule add git://github.com/username/project.git plugin/path

Running the following command gives me the output I want:

  cat .braids | grep 'url' | sed 's/url://' | awk -F/ '{print $0, $5}' > ~/vim-plugins.txt

Now that I have a list of repos that I will want to add as submodules. With a
little vim trickery I can whip and basic bash script to automatically add my
plugins.

  vi ~/vim-plugins.txt

I normal mode I type the following:
  V38j
  :'<,'>normal f i bundle/
  :%s/bundle\ //bundle\//g

This will prefix bundle/ to all lines, but the last, to the 2 column.
vim-pathogen is saved to the parent directory.

  :'<,'>normal I git submodule add 

Now I have the necessary list and location for all my plugins. I'd like to
reverse the list to make sure that pathogen gets install first.

  awk '{x[NR] = $0} END { while ( NR > 0 ) print x[NR--] }' vim-plugins.txt > plugins.txt && vim-plugins.txt

This will use awk to reverse my plugin list as I wanted. Now it's time to
remove all the plugins via braid. Then I can then add my plugins again using
git's submodules.

  cat .braids | grep ': $' | sed 's/://' > ~/plugins.txt | for plugin in `xargs`; do; rm -rf $plugin; done

The above command creates the output needed to remove all of my plugins that
were installed via braid.

Finally I just have to execute the script I created that will add all my
plugins using `git submodule`.

Once this was done all I had to do is comit my changes and pull them in and I
have no more need for braid anymore.
