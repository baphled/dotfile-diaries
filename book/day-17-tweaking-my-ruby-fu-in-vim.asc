=== Tweaking my vim-fu

I've been playing around with text objects for a few days whilst
tweaking my settings and would like to extend this functionality with a
couple of plugins. Firstly I want 'matchit' so that I can extend the
matching capabilities of vim.

  git submodule add git://github.com/tmhedberg/matchit.git bundle/matchit

Now I have the plugin I need to set it up to work in my vim.

  :let loaded_matchit = 1

NOTE: Write about the basic motions

Now it's loaded I have a few nice little motions to move around blocks,
this is all cool but I use Ruby quite a bit and that isn't supported
out of the box. So I will need to add 'vim-ruby' to introduce the same
functionality to ruby.

  git submodule add git://github.com/vim-ruby/vim-ruby.git bundle/vim-ruby

This give me a few more motions, this time focusing on moving around
ruby code.

 * ]m - start of next method definition
 * [m - start of previous definition
 * ]] - start of next module or class
 * ][ - end of next module or class
 * [[ - end of module or class
 * [] - end of module or class

There are a few more motions that are added to my vim setting but those
are well documented in `:help vim-ruby`

The following text blocks are also added to the toolset.

 * am - a method
 * im - inner method
 * aM - a class
 * iM  - inner class

'vim-ruby' doesn't just provide a few more text objects and motions but
it also includes omni completion and syntax recognition. I'll deal with
omni-completion another day but I would like to get syntax recognition
setup and ready for playing around with.


== Giving my syntax some sugar

Now I want to get tweak my ruby syntax recognition some more so this
seems like the idea time to do so.
