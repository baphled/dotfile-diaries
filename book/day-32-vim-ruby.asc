==== vim-ruby

  plugin:   vim-ruby
  homepage: http://github.com/vim-ruby/vim-ruby
  source:   git://github.com/vim-ruby/vim-ruby.git

This plugin adds quite a bit of Ruby related functionality to vim to make it more pleasant to work with the language and
make it easier to move around a file.


===== completion

This relies on vim being compiled with ruby. I haven't tested it without ruby compiled but I'd like to think that this
functionality will silently fail if vim is not installed with it enabled.

When it is enabled it adds extra functionality to omnicomplete so that I am able to search for content that relates
particularly to Ruby. This would include the following:

Classes, constants and global - When not inside a class definition
Methods, constants defined in the given class - When inside a class definition
Methods relating to the object being deferenced - After '.', '::' or ':'
Symbol names - After ':' or ':foo'

It should also be noted that this functionality may slow things down as code may have to be run to disclose class,
method and variable names from inside a ruby file.

NOTE: There a side cases that should be documented (http://github.com/vim-ruby/vim-ruby/blob/master/doc/ft-ruby-omni.txt)

===== syntax

Just like the other syntax files vim uses, this mainly deals with syntax highlighting and helping to visualise code when
an rb file is opened. It also helps towards displaying syntax errors that may have been missed. This functionality is
only triggered when a file is saved but I save enough for this not to be an issue.

There is also the ability to display extra spaces and tabs, of which I have a pet peave, this can be easily set within
my vimrc and will display the spaces or tabs with a background of red. This like other parts of vim can be customised
but I'll leave that task for another day.

===== motions

 * ]m -  Start of next method definition.
 * ]M -  End of next method definition.
 * [m -  Start of previous method definition.
 * [M -  End of previous method definition.
 * ]] -  Start of next module or class definition.
 * ][ -  End of next module or class definition.
 * [[ -  Start of previous module or class definition.
 * [] -  End of previous module or class definition.

===== text objects

 * am - "a method", select from "def" until matching "end" keyword.
 * im - "inner method", select contents of "def"/"end" block, excluding the "def" and "end" themselves.
 * aM - "a class", select from "class" until matching "end" keyword.
 * iM - "inner class", select contents of "class"/"end" block, excluding the "class" and "end" themselves.

NOTE: I'm sure I've gone over these before, will check before delving into these.

